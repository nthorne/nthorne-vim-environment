### cpp.snippets
###   - provides snippets for cpp files
###


# Unary functor definition (work related)
snippet unaryfun
	/**
	 * @justification (`system("date +%Y-%m-%d")`/nthorne) QACPP 2116: STL standard conformant predicate
	 */
	// PRQA S 2116 ++
	class ${1:`Filename('$1', 'name')`} : public std::unary_function<
										${2:int},
										${3:bool}>
	{
	// PRQA S 2116 --
	public:
		~$1()
		{
		}

		$3 operator()(const $2& arg) const
		{
			$3 l_result;

			${4}

			return l_result;
		}
	};

# Binary functor definition (work related)
snippet binaryfun
	/**
	 * @justification (`system("date +%Y-%m-%d")`/nthorne) QACPP 2116: STL standard conformant predicate
	 */
	// PRQA S 2116 ++
	class ${1:`Filename('$1', 'name')`} : public std::binary_function<
										${2:int},
										${3:long},
										${4:bool}>
	{
	// PRQA S 2116 --
	public:
		~$1()
		{
		}

		$4 operator()(const $2& fst, const $3& snd) const
		{
			$4 l_result;

			${5}

			return l_result;
		}
	};


# lint justifications
snippet justify
	/*
	 * @justification (`system("date +%Y-%m-%d")`/nthorne) QACPP ${1:2116}: STL standard conformant predicate
	 */
	// PRQA S $1 ++
	${2}// PRQA S $1 --

snippet testheader
	/**
	 * @brief tests ${1:`Filename()`}
	 * @responsible nthorne `system("date +%Y-%m-%d")`
	 * @reviewer ${2:?} `system("date +%Y-%m-%d")`
	 */
	${3}

snippet inc
	#include <${1:iostream}>${2}

snippet Inc
	#include "${1:`Filename("$1.hpp")`}"${2}

snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
	  ${2}
	}
